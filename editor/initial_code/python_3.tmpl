{% comment %}New initial code template{% endcomment %}
{% block env %}{% endblock env %}

{% block start %}
Desks = tuple[int, ...]
SquareTable = list[Desks, Desks, Desks, Desks]


def square_conference_table(desks: Desks, side_length: int) -> SquareTable:
    # your code here
    return []
{% endblock start %}


{% block example %}
print('Example:')
print(square_conference_table((2, 2, 3, 4, 5), 5))
{% endblock %}

# These "asserts" are used for self-checking
from itertools import chain
from collections import Counter
from typing import Callable


def checker(fn: Callable, ds: tuple[int, ...], s: int) -> bool:
    result = fn(ds, s)
    if Counter(chain(*result)) <= Counter(ds):
        difs = [s - sum(r) for r in result]
        return difs in ([1, 1, 1, 1], [2, 0, 2, 0], [0, 2, 0, 2]) or sorted(difs) == [0, 1, 1, 2]
    return False


{% block tests %}
{% for t in tests %}
assert {% block call %}checker(square_conference_table, {{t.input|p_args}})
{% endblock %} is {% block result %}True{% endblock %}{% endfor %}
{% endblock %}

{% block final %}
print("The mission is done! Click 'Check Solution' to earn rewards!")
{% endblock final %}
